// Code generated by xgen. Manually edited for missing types.

package saft

import (
	"time"

	"github.com/shopspring/decimal"
)

// MasterFiles ...
type MasterFiles struct {
	GeneralLedgerAccounts *GeneralLedgerAccounts `xml:"GeneralLedgerAccounts"`
	Customer              []*Customer            `xml:"Customer"`
	Supplier              []*Supplier            `xml:"Supplier"`
	Product               []*Product             `xml:"Product"`
	TaxTable              *TaxTable              `xml:"TaxTable"`
}

// AuditFile ...
type AuditFile struct {
	Header               *Header               `xml:"Header"`
	MasterFiles          *MasterFiles          `xml:"MasterFiles"`
	GeneralLedgerEntries *GeneralLedgerEntries `xml:"GeneralLedgerEntries"`
	SourceDocuments      *SourceDocuments      `xml:"SourceDocuments"`
}

// Header ...
type Header struct {
	AuditFileVersion          string                           `xml:"AuditFileVersion"`
	CompanyID                 string                           `xml:"CompanyID"`
	TaxRegistrationNumber     *SAFPTPortugueseVatNumber        `xml:"TaxRegistrationNumber"`
	TaxAccountingBasis        string                           `xml:"TaxAccountingBasis"`
	CompanyName               *SAFPTtextTypeMandatoryMax100Car `xml:"CompanyName"`
	BusinessName              *SAFPTtextTypeMandatoryMax60Car  `xml:"BusinessName"`
	CompanyAddress            *AddressStructure                `xml:"CompanyAddress"`
	FiscalYear                int                              `xml:"FiscalYear"`
	StartDate                 *SAFPTDateSpan                   `xml:"StartDate"`
	EndDate                   *SAFPTDateSpan                   `xml:"EndDate"`
	CurrencyCode              *CurrencyPT                      `xml:"CurrencyCode"`
	DateCreated               *SAFPTDateSpan                   `xml:"DateCreated"`
	TaxEntity                 *SAFPTtextTypeMandatoryMax20Car  `xml:"TaxEntity"`
	ProductCompanyTaxID       *SAFPTtextTypeMandatoryMax30Car  `xml:"ProductCompanyTaxID"`
	SoftwareCertificateNumber int                              `xml:"SoftwareCertificateNumber"`
	ProductID                 *SAFPTProductID                  `xml:"ProductID"`
	ProductVersion            *SAFPTtextTypeMandatoryMax30Car  `xml:"ProductVersion"`
	HeaderComment             *SAFPTtextTypeMandatoryMax255Car `xml:"HeaderComment"`
	Telephone                 *SAFPTtextTypeMandatoryMax20Car  `xml:"Telephone"`
	Fax                       *SAFPTtextTypeMandatoryMax20Car  `xml:"Fax"`
	Email                     *SAFPTtextTypeMandatoryMax254Car `xml:"Email"`
	Website                   *SAFPTtextTypeMandatoryMax60Car  `xml:"Website"`
}

// Account ...
type Account struct {
	AccountID            *SAFPTGLAccountID                `xml:"AccountID"`
	AccountDescription   *SAFPTtextTypeMandatoryMax100Car `xml:"AccountDescription"`
	OpeningDebitBalance  *SAFmonetaryType                 `xml:"OpeningDebitBalance"`
	OpeningCreditBalance *SAFmonetaryType                 `xml:"OpeningCreditBalance"`
	ClosingDebitBalance  *SAFmonetaryType                 `xml:"ClosingDebitBalance"`
	ClosingCreditBalance *SAFmonetaryType                 `xml:"ClosingCreditBalance"`
	GroupingCategory     string                           `xml:"GroupingCategory"`
	GroupingCode         *SAFPTGLAccountID                `xml:"GroupingCode"`
	TaxonomyCode         *SAFPTTaxonomyCode               `xml:"TaxonomyCode"`
}

// GeneralLedgerAccounts ...
type GeneralLedgerAccounts struct {
	TaxonomyReference string     `xml:"TaxonomyReference"`
	Account           []*Account `xml:"Account"`
}

// Customer ...
type Customer struct {
	CustomerID           *SAFPTtextTypeMandatoryMax30Car  `xml:"CustomerID"`
	AccountID            string                           `xml:"AccountID"`
	CustomerTaxID        *SAFPTtextTypeMandatoryMax30Car  `xml:"CustomerTaxID"`
	CompanyName          *SAFPTtextTypeMandatoryMax100Car `xml:"CompanyName"`
	Contact              *SAFPTtextTypeMandatoryMax50Car  `xml:"Contact"`
	BillingAddress       *CustomerAddressStructure        `xml:"BillingAddress"`
	ShipToAddress        []*CustomerAddressStructure      `xml:"ShipToAddress"`
	Telephone            *SAFPTtextTypeMandatoryMax20Car  `xml:"Telephone"`
	Fax                  *SAFPTtextTypeMandatoryMax20Car  `xml:"Fax"`
	Email                *SAFPTtextTypeMandatoryMax254Car `xml:"Email"`
	Website              *SAFPTtextTypeMandatoryMax60Car  `xml:"Website"`
	SelfBillingIndicator int                              `xml:"SelfBillingIndicator"`
}

// Supplier ...
type Supplier struct {
	SupplierID           *SAFPTtextTypeMandatoryMax30Car  `xml:"SupplierID"`
	AccountID            string                           `xml:"AccountID"`
	SupplierTaxID        *SAFPTtextTypeMandatoryMax30Car  `xml:"SupplierTaxID"`
	CompanyName          *SAFPTtextTypeMandatoryMax100Car `xml:"CompanyName"`
	Contact              *SAFPTtextTypeMandatoryMax50Car  `xml:"Contact"`
	BillingAddress       *AddressStructure                `xml:"BillingAddress"`
	ShipFromAddress      []*AddressStructure              `xml:"ShipFromAddress"`
	Telephone            *SAFPTtextTypeMandatoryMax20Car  `xml:"Telephone"`
	Fax                  *SAFPTtextTypeMandatoryMax20Car  `xml:"Fax"`
	Email                *SAFPTtextTypeMandatoryMax254Car `xml:"Email"`
	Website              *SAFPTtextTypeMandatoryMax60Car  `xml:"Website"`
	SelfBillingIndicator int                              `xml:"SelfBillingIndicator"`
}

// Product ...
type Product struct {
	ProductType        string                          `xml:"ProductType"`
	ProductCode        *SAFPTtextTypeMandatoryMax60Car `xml:"ProductCode"`
	ProductGroup       *SAFPTtextTypeMandatoryMax50Car `xml:"ProductGroup"`
	ProductDescription *SAFPTProductDescription        `xml:"ProductDescription"`
	ProductNumberCode  *SAFPTtextTypeMandatoryMax60Car `xml:"ProductNumberCode"`
	CustomsDetails     *CustomsDetails                 `xml:"CustomsDetails"`
}

// TaxTable ...
type TaxTable struct {
	TaxTableEntry []*TaxTableEntry `xml:"TaxTableEntry"`
}

// TaxTableEntry ...
type TaxTableEntry struct {
	TaxType           string                           `xml:"TaxType"`
	TaxCountryRegion  string                           `xml:"TaxCountryRegion"`
	TaxCode           *TaxTableEntryTaxCode            `xml:"TaxCode"`
	Description       *SAFPTtextTypeMandatoryMax255Car `xml:"Description"`
	TaxExpirationDate *SAFdateType                     `xml:"TaxExpirationDate"`
	TaxPercentage     *SAFdecimalType                  `xml:"TaxPercentage"`
	TaxAmount         *SAFmonetaryType                 `xml:"TaxAmount"`
}

// DebitLine ...
type DebitLine struct {
	RecordID         *SAFPTtextTypeMandatoryMax30Car  `xml:"RecordID"`
	AccountID        *SAFPTGLAccountID                `xml:"AccountID"`
	SourceDocumentID *SAFPTtextTypeMandatoryMax60Car  `xml:"SourceDocumentID"`
	SystemEntryDate  *SAFdateTimeType                 `xml:"SystemEntryDate"`
	Description      *SAFPTtextTypeMandatoryMax200Car `xml:"Description"`
	DebitAmount      *SAFmonetaryType                 `xml:"DebitAmount"`
}

// CreditLine ...
type CreditLine struct {
	RecordID         *SAFPTtextTypeMandatoryMax30Car  `xml:"RecordID"`
	AccountID        *SAFPTGLAccountID                `xml:"AccountID"`
	SourceDocumentID *SAFPTtextTypeMandatoryMax60Car  `xml:"SourceDocumentID"`
	SystemEntryDate  *SAFdateTimeType                 `xml:"SystemEntryDate"`
	Description      *SAFPTtextTypeMandatoryMax200Car `xml:"Description"`
	CreditAmount     *SAFmonetaryType                 `xml:"CreditAmount"`
}

// Lines ...
type Lines struct {
	DebitLine  []*DebitLine  `xml:"DebitLine"`
	CreditLine []*CreditLine `xml:"CreditLine"`
}

// Transaction ...
type Transaction struct {
	TransactionID     *SAFPTTransactionID              `xml:"TransactionID"`
	Period            *SAFPTAccountingPeriod           `xml:"Period"`
	TransactionDate   *SAFdateType                     `xml:"TransactionDate"`
	SourceID          *SAFPTtextTypeMandatoryMax30Car  `xml:"SourceID"`
	Description       *SAFPTtextTypeMandatoryMax200Car `xml:"Description"`
	DocArchivalNumber *SAFTPTDocArchivalNumber         `xml:"DocArchivalNumber"`
	TransactionType   string                           `xml:"TransactionType"`
	GLPostingDate     *SAFdateType                     `xml:"GLPostingDate"`
	CustomerID        *SAFPTtextTypeMandatoryMax30Car  `xml:"CustomerID"`
	SupplierID        *SAFPTtextTypeMandatoryMax30Car  `xml:"SupplierID"`
	Lines             *Lines                           `xml:"Lines"`
}

// Journal ...
type Journal struct {
	JournalID   *SAFPTJournalID                  `xml:"JournalID"`
	Description *SAFPTtextTypeMandatoryMax200Car `xml:"Description"`
	Transaction []*Transaction                   `xml:"Transaction"`
}

// GeneralLedgerEntries ...
type GeneralLedgerEntries struct {
	NumberOfEntries int              `xml:"NumberOfEntries"`
	TotalDebit      *SAFmonetaryType `xml:"TotalDebit"`
	TotalCredit     *SAFmonetaryType `xml:"TotalCredit"`
	Journal         []*Journal       `xml:"Journal"`
}

// DocumentStatus ...
type DocumentStatus struct {
	InvoiceStatus     string                          `xml:"InvoiceStatus"`
	InvoiceStatusDate *SAFdateTimeType                `xml:"InvoiceStatusDate"`
	Reason            *SAFPTtextTypeMandatoryMax50Car `xml:"Reason"`
	SourceID          *SAFPTtextTypeMandatoryMax30Car `xml:"SourceID"`
	SourceBilling     *SAFTPTSourceBilling            `xml:"SourceBilling"`
}

// Line ...
type Line struct {
	LineNumber          int                                `xml:"LineNumber"`
	OrderReferences     []*OrderReferences                 `xml:"OrderReferences"`
	ProductCode         *SAFPTtextTypeMandatoryMax60Car    `xml:"ProductCode"`
	ProductDescription  *SAFPTProductDescription           `xml:"ProductDescription"`
	Quantity            *SAFdecimalType                    `xml:"Quantity"`
	UnitOfMeasure       *SAFPTtextTypeMandatoryMax20Car    `xml:"UnitOfMeasure"`
	UnitPrice           *SAFmonetaryType                   `xml:"UnitPrice"`
	TaxBase             *SAFmonetaryType                   `xml:"TaxBase"`
	TaxPointDate        *SAFdateType                       `xml:"TaxPointDate"`
	References          []*References                      `xml:"References"`
	Description         *SAFPTtextTypeMandatoryMax200Car   `xml:"Description"`
	ProductSerialNumber *ProductSerialNumber               `xml:"ProductSerialNumber"`
	DebitAmount         *SAFmonetaryType                   `xml:"DebitAmount"`
	CreditAmount        *SAFmonetaryType                   `xml:"CreditAmount"`
	Tax                 *Tax                               `xml:"Tax"`
	TaxExemptionReason  *SAFPTPortugueseTaxExemptionReason `xml:"TaxExemptionReason"`
	TaxExemptionCode    *SAFPTPortugueseTaxExemptionCode   `xml:"TaxExemptionCode"`
	SettlementAmount    *SAFmonetaryType                   `xml:"SettlementAmount"`
	CustomsInformation  *CustomsInformation                `xml:"CustomsInformation"`
}

// DocumentTotals ...
type DocumentTotals struct {
	TaxPayable *SAFmonetaryType `xml:"TaxPayable"`
	NetTotal   *SAFmonetaryType `xml:"NetTotal"`
	GrossTotal *SAFmonetaryType `xml:"GrossTotal"`
	Currency   *Currency        `xml:"Currency"`
	Settlement []*Settlement    `xml:"Settlement"`
	Payment    []*PaymentMethod `xml:"Payment"`
}

// Invoice ...
type Invoice struct {
	InvoiceNo         string                           `xml:"InvoiceNo"`
	ATCUD             *SAFPTtextTypeMandatoryMax100Car `xml:"ATCUD"`
	DocumentStatus    *DocumentStatus                  `xml:"DocumentStatus"`
	Hash              *SAFPTtextTypeMandatoryMax172Car `xml:"Hash"`
	HashControl       *SAFPTHashControl                `xml:"HashControl"`
	Period            int                              `xml:"Period"`
	InvoiceDate       *SAFdateType                     `xml:"InvoiceDate"`
	InvoiceType       string                           `xml:"InvoiceType"`
	SpecialRegimes    *SpecialRegimes                  `xml:"SpecialRegimes"`
	SourceID          *SAFPTtextTypeMandatoryMax30Car  `xml:"SourceID"`
	EACCode           string                           `xml:"EACCode"`
	SystemEntryDate   *SAFdateTimeType                 `xml:"SystemEntryDate"`
	TransactionID     *SAFPTTransactionID              `xml:"TransactionID"`
	CustomerID        *SAFPTtextTypeMandatoryMax30Car  `xml:"CustomerID"`
	ShipTo            *ShippingPointStructure          `xml:"ShipTo"`
	ShipFrom          *ShippingPointStructure          `xml:"ShipFrom"`
	MovementEndTime   *SAFdateTimeType                 `xml:"MovementEndTime"`
	MovementStartTime *SAFdateTimeType                 `xml:"MovementStartTime"`
	Line              []*Line                          `xml:"Line"`
	DocumentTotals    *DocumentTotals                  `xml:"DocumentTotals"`
	WithholdingTax    []*WithholdingTax                `xml:"WithholdingTax"`
}

// SalesInvoices ...
type SalesInvoices struct {
	NumberOfEntries int              `xml:"NumberOfEntries"`
	TotalDebit      *SAFmonetaryType `xml:"TotalDebit"`
	TotalCredit     *SAFmonetaryType `xml:"TotalCredit"`
	Invoice         []*Invoice       `xml:"Invoice"`
}

// StockMovement ...
type StockMovement struct {
	DocumentNumber    string                           `xml:"DocumentNumber"`
	ATCUD             *SAFPTtextTypeMandatoryMax100Car `xml:"ATCUD"`
	DocumentStatus    *DocumentStatus                  `xml:"DocumentStatus"`
	Hash              *SAFPTtextTypeMandatoryMax172Car `xml:"Hash"`
	HashControl       *SAFPTHashControl                `xml:"HashControl"`
	Period            int                              `xml:"Period"`
	MovementDate      *SAFdateType                     `xml:"MovementDate"`
	MovementType      string                           `xml:"MovementType"`
	SystemEntryDate   *SAFdateTimeType                 `xml:"SystemEntryDate"`
	TransactionID     *SAFPTTransactionID              `xml:"TransactionID"`
	CustomerID        *SAFPTtextTypeMandatoryMax30Car  `xml:"CustomerID"`
	SupplierID        *SAFPTtextTypeMandatoryMax30Car  `xml:"SupplierID"`
	SourceID          *SAFPTtextTypeMandatoryMax30Car  `xml:"SourceID"`
	EACCode           string                           `xml:"EACCode"`
	MovementComments  *SAFPTtextTypeMandatoryMax60Car  `xml:"MovementComments"`
	ShipTo            *ShippingPointStructure          `xml:"ShipTo"`
	ShipFrom          *ShippingPointStructure          `xml:"ShipFrom"`
	MovementEndTime   *SAFdateTimeType                 `xml:"MovementEndTime"`
	MovementStartTime *SAFdateTimeType                 `xml:"MovementStartTime"`
	ATDocCodeID       *SAFPTtextTypeMandatoryMax200Car `xml:"ATDocCodeID"`
	Line              []*Line                          `xml:"Line"`
	DocumentTotals    *DocumentTotals                  `xml:"DocumentTotals"`
}

// MovementOfGoods ...
type MovementOfGoods struct {
	NumberOfMovementLines int              `xml:"NumberOfMovementLines"`
	TotalQuantityIssued   *SAFdecimalType  `xml:"TotalQuantityIssued"`
	StockMovement         []*StockMovement `xml:"StockMovement"`
}

// WorkDocument ...
type WorkDocument struct {
	DocumentNumber  string                           `xml:"DocumentNumber"`
	ATCUD           *SAFPTtextTypeMandatoryMax100Car `xml:"ATCUD"`
	DocumentStatus  *DocumentStatus                  `xml:"DocumentStatus"`
	Hash            *SAFPTtextTypeMandatoryMax172Car `xml:"Hash"`
	HashControl     *SAFPTHashControl                `xml:"HashControl"`
	Period          int                              `xml:"Period"`
	WorkDate        *SAFdateType                     `xml:"WorkDate"`
	WorkType        string                           `xml:"WorkType"`
	SourceID        *SAFPTtextTypeMandatoryMax30Car  `xml:"SourceID"`
	EACCode         string                           `xml:"EACCode"`
	SystemEntryDate *SAFdateTimeType                 `xml:"SystemEntryDate"`
	TransactionID   *SAFPTTransactionID              `xml:"TransactionID"`
	CustomerID      *SAFPTtextTypeMandatoryMax30Car  `xml:"CustomerID"`
	Line            []*Line                          `xml:"Line"`
	DocumentTotals  *DocumentTotals                  `xml:"DocumentTotals"`
}

// WorkingDocuments ...
type WorkingDocuments struct {
	NumberOfEntries int              `xml:"NumberOfEntries"`
	TotalDebit      *SAFmonetaryType `xml:"TotalDebit"`
	TotalCredit     *SAFmonetaryType `xml:"TotalCredit"`
	WorkDocument    []*WorkDocument  `xml:"WorkDocument"`
}

// SourceDocumentID ...
type SourceDocumentID struct {
	OriginatingON *SAFPTtextTypeMandatoryMax60Car  `xml:"OriginatingON"`
	InvoiceDate   *SAFdateType                     `xml:"InvoiceDate"`
	Description   *SAFPTtextTypeMandatoryMax200Car `xml:"Description"`
}

// Settlement ...
type Settlement struct {
	SettlementAmount *SAFmonetaryType `xml:"SettlementAmount"`
}

// Payment ...
type Payment struct {
	PaymentRefNo    string                           `xml:"PaymentRefNo"`
	ATCUD           *SAFPTtextTypeMandatoryMax100Car `xml:"ATCUD"`
	Period          int                              `xml:"Period"`
	TransactionID   *SAFPTTransactionID              `xml:"TransactionID"`
	TransactionDate *SAFdateType                     `xml:"TransactionDate"`
	PaymentType     *SAFTPTPaymentType               `xml:"PaymentType"`
	Description     *SAFPTtextTypeMandatoryMax200Car `xml:"Description"`
	SystemID        *SAFPTtextTypeMandatoryMax60Car  `xml:"SystemID"`
	DocumentStatus  *DocumentStatus                  `xml:"DocumentStatus"`
	PaymentMethod   []*PaymentMethod                 `xml:"PaymentMethod"`
	SourceID        *SAFPTtextTypeMandatoryMax30Car  `xml:"SourceID"`
	SystemEntryDate *SAFdateTimeType                 `xml:"SystemEntryDate"`
	CustomerID      *SAFPTtextTypeMandatoryMax30Car  `xml:"CustomerID"`
	Line            []*Line                          `xml:"Line"`
	DocumentTotals  *DocumentTotals                  `xml:"DocumentTotals"`
	WithholdingTax  []*WithholdingTax                `xml:"WithholdingTax"`
}

// Payments ...
type Payments struct {
	NumberOfEntries int              `xml:"NumberOfEntries"`
	TotalDebit      *SAFmonetaryType `xml:"TotalDebit"`
	TotalCredit     *SAFmonetaryType `xml:"TotalCredit"`
	Payment         []*Payment       `xml:"Payment"`
}

// SourceDocuments ...
type SourceDocuments struct {
	SalesInvoices    *SalesInvoices    `xml:"SalesInvoices"`
	MovementOfGoods  *MovementOfGoods  `xml:"MovementOfGoods"`
	WorkingDocuments *WorkingDocuments `xml:"WorkingDocuments"`
	Payments         *Payments         `xml:"Payments"`
}

// AddressStructure ...
type AddressStructure struct {
	BuildingNumber *SAFPTtextTypeMandatoryMax10Car  `xml:"BuildingNumber"`
	StreetName     *SAFPTtextTypeMandatoryMax200Car `xml:"StreetName"`
	AddressDetail  *SAFPTtextTypeMandatoryMax210Car `xml:"AddressDetail"`
	City           *SAFPTtextTypeMandatoryMax50Car  `xml:"City"`
	PostalCode     *SAFPTtextTypeMandatoryMax20Car  `xml:"PostalCode"`
	Region         *SAFPTtextTypeMandatoryMax50Car  `xml:"Region"`
	Country        string                           `xml:"Country"`
}

// CustomerAddressStructure ...
type CustomerAddressStructure struct {
	BuildingNumber *SAFPTtextTypeMandatoryMax10Car  `xml:"BuildingNumber"`
	StreetName     *SAFPTtextTypeMandatoryMax200Car `xml:"StreetName"`
	AddressDetail  *SAFPTtextTypeMandatoryMax210Car `xml:"AddressDetail"`
	City           *SAFPTtextTypeMandatoryMax50Car  `xml:"City"`
	PostalCode     *SAFPTtextTypeMandatoryMax20Car  `xml:"PostalCode"`
	Region         *SAFPTtextTypeMandatoryMax50Car  `xml:"Region"`
	Country        *CustomerCountry                 `xml:"Country"`
}

// Currency ...
type Currency struct {
	CurrencyCode   string           `xml:"CurrencyCode"`
	CurrencyAmount *SAFmonetaryType `xml:"CurrencyAmount"`
	ExchangeRate   *SAFdecimalType  `xml:"ExchangeRate"`
}

// CustomsDetails ...
type CustomsDetails struct {
	CNCode   []*SAFPTCNCode   `xml:"CNCode"`
	UNNumber []*SAFPTUNNumber `xml:"UNNumber"`
}

// CustomsInformation ...
type CustomsInformation struct {
	ARCNo     []*SAFPTtextTypeMandatoryMax21Car `xml:"ARCNo"`
	IECAmount *SAFmonetaryType                  `xml:"IECAmount"`
}

// MovementTax ...
type MovementTax struct {
	TaxType          *SAFTPTMovementTaxType `xml:"TaxType"`
	TaxCountryRegion string                 `xml:"TaxCountryRegion"`
	TaxCode          *SAFTPTMovementTaxCode `xml:"TaxCode"`
	TaxPercentage    *SAFdecimalType        `xml:"TaxPercentage"`
}

// OrderReferences ...
type OrderReferences struct {
	OriginatingON *SAFPTtextTypeMandatoryMax60Car `xml:"OriginatingON"`
	OrderDate     *SAFdateType                    `xml:"OrderDate"`
}

// PaymentMethod ...
type PaymentMethod struct {
	PaymentMechanism string           `xml:"PaymentMechanism"`
	PaymentAmount    *SAFmonetaryType `xml:"PaymentAmount"`
	PaymentDate      string           `xml:"PaymentDate"`
}

// PaymentTax ...
type PaymentTax struct {
	TaxType          string           `xml:"TaxType"`
	TaxCountryRegion string           `xml:"TaxCountryRegion"`
	TaxCode          *PaymentTaxCode  `xml:"TaxCode"`
	TaxPercentage    *SAFdecimalType  `xml:"TaxPercentage"`
	TaxAmount        *SAFmonetaryType `xml:"TaxAmount"`
}

// ProductSerialNumber ...
type ProductSerialNumber struct {
	SerialNumber []*SAFPTtextTypeMandatoryMax100Car `xml:"SerialNumber"`
}

// References ...
type References struct {
	Reference *SAFPTtextTypeMandatoryMax60Car `xml:"Reference"`
	Reason    *SAFPTtextTypeMandatoryMax50Car `xml:"Reason"`
}

// ShippingPointStructure ...
type ShippingPointStructure struct {
	DeliveryID   []*SAFPTtextTypeMandatoryMax255Car `xml:"DeliveryID"`
	DeliveryDate *SAFdateType                       `xml:"DeliveryDate"`
	WarehouseID  *SAFPTtextTypeMandatoryMax50Car    `xml:"WarehouseID"`
	LocationID   *SAFPTtextTypeMandatoryMax30Car    `xml:"LocationID"`
	Address      *CustomerAddressStructure          `xml:"Address"`
}

// SpecialRegimes ...
type SpecialRegimes struct {
	SelfBillingIndicator         int `xml:"SelfBillingIndicator"`
	CashVATSchemeIndicator       int `xml:"CashVATSchemeIndicator"`
	ThirdPartiesBillingIndicator int `xml:"ThirdPartiesBillingIndicator"`
}

// Tax ...
type Tax struct {
	TaxType          string           `xml:"TaxType"`
	TaxCountryRegion string           `xml:"TaxCountryRegion"`
	TaxCode          string           `xml:"TaxCode"`
	TaxPercentage    *SAFdecimalType  `xml:"TaxPercentage"`
	TaxAmount        *SAFmonetaryType `xml:"TaxAmount"`
}

// WithholdingTax ...
type WithholdingTax struct {
	WithholdingTaxType        string                          `xml:"WithholdingTaxType"`
	WithholdingTaxDescription *SAFPTtextTypeMandatoryMax60Car `xml:"WithholdingTaxDescription"`
	WithholdingTaxAmount      *SAFmonetaryType                `xml:"WithholdingTaxAmount"`
}

// AccountDescription ...
type AccountDescription *SAFPTtextTypeMandatoryMax100Car

// Address ...
type Address *CustomerAddressStructure

// AddressDetail ...
type AddressDetail *SAFPTtextTypeMandatoryMax210Car

// ARCNo ...
type ARCNo *SAFPTtextTypeMandatoryMax21Car

// ATCUD ...
type ATCUD *SAFPTtextTypeMandatoryMax100Car

// ATDocCodeID ...
type ATDocCodeID *SAFPTtextTypeMandatoryMax200Car

// BillingAddress ...
type BillingAddress *AddressStructure

// BuildingNumber ...
type BuildingNumber *SAFPTtextTypeMandatoryMax10Car

// BusinessName ...
type BusinessName *SAFPTtextTypeMandatoryMax60Car

// City ...
type City *SAFPTtextTypeMandatoryMax50Car

// ClosingCreditBalance ...
type ClosingCreditBalance *SAFmonetaryType

// ClosingDebitBalance ...
type ClosingDebitBalance *SAFmonetaryType

// CNCode ...
type CNCode *SAFPTCNCode

// CompanyAddress ...
type CompanyAddress *AddressStructure

// CompanyName ...
type CompanyName *SAFPTtextTypeMandatoryMax100Car

// Contact ...
type Contact *SAFPTtextTypeMandatoryMax50Car

// CreditAmount ...
type CreditAmount *SAFmonetaryType

// CurrencyAmount ...
type CurrencyAmount *SAFmonetaryType

// CustomerID ...
type CustomerID *SAFPTtextTypeMandatoryMax30Car

// CustomerTaxID ...
type CustomerTaxID *SAFPTtextTypeMandatoryMax30Car

// DateCreated ...
type DateCreated *SAFPTDateSpan

// DebitAmount ...
type DebitAmount *SAFmonetaryType

// DeliveryDate ...
type DeliveryDate string

// DeliveryID ...
type DeliveryID *SAFPTtextTypeMandatoryMax255Car

// Description ...
type Description *SAFPTtextTypeMandatoryMax200Car

// DocArchivalNumber ...
type DocArchivalNumber *SAFTPTDocArchivalNumber

// Email ...
type Email *SAFPTtextTypeMandatoryMax254Car

// EndDate ...
type EndDate *SAFPTDateSpan

// ExchangeRate ...
type ExchangeRate *SAFdecimalType

// Fax ...
type Fax *SAFPTtextTypeMandatoryMax20Car

// GLPostingDate ...
type GLPostingDate string

// GrossTotal ...
type GrossTotal *SAFmonetaryType

// Hash ...
type Hash *SAFPTtextTypeMandatoryMax172Car

// HashControl ...
type HashControl *SAFPTHashControl

// HeaderComment ...
type HeaderComment *SAFPTtextTypeMandatoryMax255Car

// IECAmount ...
type IECAmount *SAFmonetaryType

// InvoiceDate ...
type InvoiceDate string

// InvoiceStatusDate ...
type InvoiceStatusDate string

// JournalID ...
type JournalID *SAFPTJournalID

// LineNumber ...
type LineNumber int

// LocationID ...
type LocationID *SAFPTtextTypeMandatoryMax30Car

// MovementComments ...
type MovementComments *SAFPTtextTypeMandatoryMax60Car

// MovementDate ...
type MovementDate string

// MovementEndTime ...
type MovementEndTime string

// MovementStartTime ...
type MovementStartTime string

// MovementStatusDate ...
type MovementStatusDate string

// NetTotal ...
type NetTotal *SAFmonetaryType

// NumberOfEntries ...
type NumberOfEntries int

// NumberOfMovementLines ...
type NumberOfMovementLines int

// OpeningCreditBalance ...
type OpeningCreditBalance *SAFmonetaryType

// OpeningDebitBalance ...
type OpeningDebitBalance *SAFmonetaryType

// OrderDate ...
type OrderDate string

// OriginatingON ...
type OriginatingON *SAFPTtextTypeMandatoryMax60Car

// PaymentStatusDate ...
type PaymentStatusDate string

// PostalCode ...
type PostalCode *SAFPTtextTypeMandatoryMax20Car

// ProductCode ...
type ProductCode *SAFPTtextTypeMandatoryMax60Car

// ProductCompanyTaxID ...
type ProductCompanyTaxID *SAFPTtextTypeMandatoryMax30Car

// ProductDescription ...
type ProductDescription *SAFPTProductDescription

// ProductGroup ...
type ProductGroup *SAFPTtextTypeMandatoryMax50Car

// ProductID ...
type ProductID *SAFPTProductID

// ProductNumberCode ...
type ProductNumberCode *SAFPTtextTypeMandatoryMax60Car

// ProductVersion ...
type ProductVersion *SAFPTtextTypeMandatoryMax30Car

// Quantity ...
type Quantity *SAFdecimalType

// Reason ...
type Reason *SAFPTtextTypeMandatoryMax50Car

// RecordID ...
type RecordID *SAFPTtextTypeMandatoryMax30Car

// Reference ...
type Reference *SAFPTtextTypeMandatoryMax60Car

// Region ...
type Region *SAFPTtextTypeMandatoryMax50Car

// SerialNumber ...
type SerialNumber *SAFPTtextTypeMandatoryMax100Car

// SettlementAmount ...
type SettlementAmount *SAFmonetaryType

// ShipFrom ...
type ShipFrom *ShippingPointStructure

// ShipFromAddress ...
type ShipFromAddress *AddressStructure

// ShipTo ...
type ShipTo *ShippingPointStructure

// ShipToAddress ...
type ShipToAddress *CustomerAddressStructure

// SoftwareCertificateNumber ...
type SoftwareCertificateNumber int

// SourceID ...
type SourceID *SAFPTtextTypeMandatoryMax30Car

// StartDate ...
type StartDate *SAFPTDateSpan

// StreetName ...
type StreetName *SAFPTtextTypeMandatoryMax200Car

// SupplierID ...
type SupplierID *SAFPTtextTypeMandatoryMax30Car

// SupplierTaxID ...
type SupplierTaxID *SAFPTtextTypeMandatoryMax30Car

// SystemEntryDate ...
type SystemEntryDate string

// SystemID ...
type SystemID *SAFPTtextTypeMandatoryMax60Car

// TaxAmount ...
type TaxAmount *SAFmonetaryType

// TaxBase ...
type TaxBase *SAFmonetaryType

// TaxEntity ...
type TaxEntity *SAFPTtextTypeMandatoryMax20Car

// TaxExemptionCode ...
type TaxExemptionCode *SAFPTPortugueseTaxExemptionCode

// TaxExemptionReason ...
type TaxExemptionReason *SAFPTPortugueseTaxExemptionReason

// TaxExpirationDate ...
type TaxExpirationDate string

// TaxPayable ...
type TaxPayable *SAFmonetaryType

// TaxPercentage ...
type TaxPercentage *SAFdecimalType

// TaxPointDate ...
type TaxPointDate string

// TaxVerificationDate ...
type TaxVerificationDate string

// Telephone ...
type Telephone *SAFPTtextTypeMandatoryMax20Car

// TotalCredit ...
type TotalCredit *SAFmonetaryType

// TotalDebit ...
type TotalDebit *SAFmonetaryType

// TotalQuantityIssued ...
type TotalQuantityIssued *SAFdecimalType

// TransactionDate ...
type TransactionDate string

// TransactionID ...
type TransactionID *SAFPTTransactionID

// UnitOfMeasure ...
type UnitOfMeasure *SAFPTtextTypeMandatoryMax20Car

// UnitPrice ...
type UnitPrice *SAFmonetaryType

// UNNumber ...
type UNNumber *SAFPTUNNumber

// WarehouseID ...
type WarehouseID *SAFPTtextTypeMandatoryMax50Car

// Website ...
type Website *SAFPTtextTypeMandatoryMax60Car

// WorkDate ...
type WorkDate string

// WorkStatusDate ...
type WorkStatusDate string

// AccountID ...
type AccountID string

// AuditFileVersion ...
type AuditFileVersion string

// CashVATSchemeIndicator ...
type CashVATSchemeIndicator int

// CompanyID is Concatenacao da Conservatoria do Registo Comercial com o numero do
//
//	registo comercial separados pelo caracter espaco. Nos casos em que nao existe o
//	registo comercial, deve ser indicado o NIF.
type CompanyID string

// Country ...
type Country string

// CurrencyCode ...
type CurrencyCode string

// DocumentNumber ...
type DocumentNumber string

// EACCode ...
type EACCode string

// FiscalYear ...
type FiscalYear int

// GroupingCategory is GR para conta de 1. grau da contabilidade geral, GA para conta
//
//	agregadora ou integradora da contabilidade geral, GM para conta de movimento da
//	contabilidade geral, AR para conta de 1. grau da contabilidade analitica, AA para
//	conta agregadora ou integradora da contabilidade analitica, AM para conta de
//	movimento da contabilidade analitica
type GroupingCategory string

// InvoiceNo ...
type InvoiceNo string

// InvoiceStatus is N para Normal, S para Autofaturacao, A para Documento anulado, R para
//
//	Documento de resumo doutros documentos criados noutras aplicacoes e gerado nesta
//	aplicacao, F para Documento faturado
type InvoiceStatus string

// InvoiceType is Restricao:FT para Fatura, emitida nos termos do artigo 36. do Codigo
//
//	do IVA, FS para Fatura simplificada, emitida nos termos do artigo 40. do Codigo do
//	IVA, FR para Fatura-recibo, ND para Nota de debito, NC para Nota de credito, VD para
//	Venda a dinheiro e factura/recibo (a), TV para Talao de venda (a), TD para Talao de
//	devolucao (a), AA para Alienacao de ativos (a), DA para Devolucao de ativos (a).
//	Para o setor Segurador, ainda pode ser preenchido com: RP para Premio ou recibo de
//	premio, RE para Estorno ou recibo de estorno, CS para Imputacao a co-seguradoras, LD
//	para Imputacao a co-seguradora lider, RA para Resseguro aceite. (a) Para os dados
//	ate 2012-12-31
type InvoiceType string

// MovementStatus is N para Normal, T para Por conta de terceiros, A para Documento
//
//	anulado, F para Documento faturado, quando para este documento tambem existe na
//	tabela 4.1. para Documentos comerciais a clientes (SalesInvoices) o correspondente
//	do tipo fatura ou fatura simplificada, R para Documento de resumo doutros documentos
//	criados noutras aplicacoes e gerado nesta aplicacao
type MovementStatus string

// MovementType is Restricao: Tipos de Documento (GR para Guia de remessa, GT para Guia
//
//	de transporte incluindo as globais, GA para Guia de movimentacao de ativos fixos
//	proprios, GC para Guia de consignacao, GD para Guia ou nota de devolucao
type MovementType string

// PaymentMechanism is Restricao:CC para Cartao credito, CD para Cartao debito, CH para
//
//	Cheque bancario, CI para credito documentario internacional, CO para Cheque ou
//	cartao oferta, CS para Compensacao de saldos em conta corrente, DE para Dinheiro
//	eletronico, por exemplo em cartoes de fidelidade ou de pontos, LC para Letra
//	comercial, MB para Referencias de pagamento para Multibanco, NU para Numerario, OU
//	para Outros meios aqui nao assinalados, PR para Permuta de bens, TB para
//	Transferencia bancaria ou debito direto autorizado, TR para titulos de compensacao
//	extrassalarial independentemente do seu suporte, por exemplo, titulos de refeicao,
//	educacao, etc.
type PaymentMechanism string

// PaymentRefNo ...
type PaymentRefNo string

// PaymentStatus is N para normal, A para Anulado
type PaymentStatus string

// Period ...
type Period int

// ProductType is Restricao: P para Produtos, S para Servicos, O para Outros (Ex: portes
//
//	debitados, adiantamentos recebidos ou alienacao de ativos), E para Impostos
//	Especiais de Consumo (ex.:IABA, ISP, IT); I para impostos, taxas e encargos
//	parafiscais exceto IVA e IS que deverao ser refletidos na tabela 2.5 Tabela de
//	impostos (TaxTable)e Impostos Especiais de Consumo
type ProductType string

// SelfBillingIndicator ...
type SelfBillingIndicator int

// TaxAccountingBasis is C para Contabilidade, E para Faturacao emitida por terceiros, F para
//
//	Faturacao, I para Contabilidade integrada com a faturacao, P para Faturacao parcial,
//	R para Recibos (a), S para Autofaturacao, T para Documentos de transporte (a). (a)
//	Deve ser indicado este tipo, se o programa apenas este emitir este tipo de
//	documento. Caso contrario, devera ser utilizado o tipo C, F ou I
type TaxAccountingBasis string

// TaxCode ...
type TaxCode string

// TaxCountryRegion ...
type TaxCountryRegion string

// TaxonomyReference is S para SNC base (Taxonomia S), M para SNC microentidades (Taxonomia
//
//	M), N para Normas Internacionais de Contabilidade (Taxonomia S), O para outros
//	referenciais contabilisticos cuja taxonomia nao se encontra
//	codificada
type TaxonomyReference string

// TaxType ...
type TaxType string

// ThirdPartiesBillingIndicator ...
type ThirdPartiesBillingIndicator int

// TransactionType is Restricao: N para Normal, R para Regularizacoes do periodo de
//
//	tributacao, A para Apuramento de resultados, J para Movimentos de ajustamento
type TransactionType string

// WithholdingTaxType is Restricao: IRS para Imposto Sobre o Rendimento das Pessoas Singulares,
//
//	IRC para Imposto Sobre o Rendimento das Pessoas colectivas, IS para Imposto do selo
type WithholdingTaxType string

// WorkStatus is N para Normal, A para Anulado, F para faturado (quando para este
//
//	documento tambem existe na tabela 4.1. o correspondente do tipo fatura ou fatura
//	simplificada)
type WorkStatus string

// WorkType is P para documento produzido na aplicacao, I para documento integrado e
//
//	produzido noutra aplicacao, M para documento proveniente de recuperacao ou de
//	emissao manual
type WorkType string

// SAFdateTimeType ...
type SAFdateTimeType string

// SAFdateType ...
type SAFdateType string

// Missing types
type SAFPTPortugueseVatNumber uint
type SAFPTtextTypeMandatoryMax100Car string
type SAFPTtextTypeMandatoryMax30Car string
type SAFPTtextTypeMandatoryMax60Car string

type SAFPTDateSpan time.Time
type CurrencyPT string
type SAFPTtextTypeMandatoryMax10Car string

type SAFPTtextTypeMandatoryMax255Car string
type SAFPTtextTypeMandatoryMax20Car string
type SAFPTtextTypeMandatoryMax254Car string
type SAFPTtextTypeMandatoryMax50Car string
type SAFPTtextTypeMandatoryMax200Car string
type SAFPTtextTypeMandatoryMax172Car string
type SAFPTProductID string
type SAFPTGLAccountID string
type SAFmonetaryType decimal.Decimal
type SAFPTTaxonomyCode uint
type SAFPTProductDescription string
type TaxTableEntryTaxCode string
type SAFdecimalType decimal.Decimal
type SAFPTTransactionID string
