// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: company_management.proto

package company

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CompanyManagement_CreateCompany_FullMethodName    = "/hestia.v1.company.CompanyManagement/CreateCompany"
	CompanyManagement_GetCompanies_FullMethodName     = "/hestia.v1.company.CompanyManagement/GetCompanies"
	CompanyManagement_GetCompany_FullMethodName       = "/hestia.v1.company.CompanyManagement/GetCompany"
	CompanyManagement_UpdateCompany_FullMethodName    = "/hestia.v1.company.CompanyManagement/UpdateCompany"
	CompanyManagement_CreateLocation_FullMethodName   = "/hestia.v1.company.CompanyManagement/CreateLocation"
	CompanyManagement_AddUserToCompany_FullMethodName = "/hestia.v1.company.CompanyManagement/AddUserToCompany"
)

// CompanyManagementClient is the client API for CompanyManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyManagementClient interface {
	CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*Id, error)
	GetCompanies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCompaniesResponse, error)
	GetCompany(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Company, error)
	UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// rpc DeleteCompany(DeleteCompanyRequest) returns (DeleteCompanyResponse);
	// rpc ListCompanies(ListCompaniesRequest) returns (ListCompaniesResponse);
	CreateLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Id, error)
	AddUserToCompany(ctx context.Context, in *AddUserToCompanyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type companyManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyManagementClient(cc grpc.ClientConnInterface) CompanyManagementClient {
	return &companyManagementClient{cc}
}

func (c *companyManagementClient) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, CompanyManagement_CreateCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyManagementClient) GetCompanies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCompaniesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCompaniesResponse)
	err := c.cc.Invoke(ctx, CompanyManagement_GetCompanies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyManagementClient) GetCompany(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Company, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Company)
	err := c.cc.Invoke(ctx, CompanyManagement_GetCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyManagementClient) UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CompanyManagement_UpdateCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyManagementClient) CreateLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, CompanyManagement_CreateLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyManagementClient) AddUserToCompany(ctx context.Context, in *AddUserToCompanyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CompanyManagement_AddUserToCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyManagementServer is the server API for CompanyManagement service.
// All implementations must embed UnimplementedCompanyManagementServer
// for forward compatibility.
type CompanyManagementServer interface {
	CreateCompany(context.Context, *CreateCompanyRequest) (*Id, error)
	GetCompanies(context.Context, *emptypb.Empty) (*ListCompaniesResponse, error)
	GetCompany(context.Context, *Id) (*Company, error)
	UpdateCompany(context.Context, *UpdateCompanyRequest) (*emptypb.Empty, error)
	// rpc DeleteCompany(DeleteCompanyRequest) returns (DeleteCompanyResponse);
	// rpc ListCompanies(ListCompaniesRequest) returns (ListCompaniesResponse);
	CreateLocation(context.Context, *Location) (*Id, error)
	AddUserToCompany(context.Context, *AddUserToCompanyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCompanyManagementServer()
}

// UnimplementedCompanyManagementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCompanyManagementServer struct{}

func (UnimplementedCompanyManagementServer) CreateCompany(context.Context, *CreateCompanyRequest) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (UnimplementedCompanyManagementServer) GetCompanies(context.Context, *emptypb.Empty) (*ListCompaniesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanies not implemented")
}
func (UnimplementedCompanyManagementServer) GetCompany(context.Context, *Id) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (UnimplementedCompanyManagementServer) UpdateCompany(context.Context, *UpdateCompanyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (UnimplementedCompanyManagementServer) CreateLocation(context.Context, *Location) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocation not implemented")
}
func (UnimplementedCompanyManagementServer) AddUserToCompany(context.Context, *AddUserToCompanyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToCompany not implemented")
}
func (UnimplementedCompanyManagementServer) mustEmbedUnimplementedCompanyManagementServer() {}
func (UnimplementedCompanyManagementServer) testEmbeddedByValue()                           {}

// UnsafeCompanyManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyManagementServer will
// result in compilation errors.
type UnsafeCompanyManagementServer interface {
	mustEmbedUnimplementedCompanyManagementServer()
}

func RegisterCompanyManagementServer(s grpc.ServiceRegistrar, srv CompanyManagementServer) {
	// If the following call pancis, it indicates UnimplementedCompanyManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CompanyManagement_ServiceDesc, srv)
}

func _CompanyManagement_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyManagementServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyManagement_CreateCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyManagementServer).CreateCompany(ctx, req.(*CreateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyManagement_GetCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyManagementServer).GetCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyManagement_GetCompanies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyManagementServer).GetCompanies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyManagement_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyManagementServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyManagement_GetCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyManagementServer).GetCompany(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyManagement_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyManagementServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyManagement_UpdateCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyManagementServer).UpdateCompany(ctx, req.(*UpdateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyManagement_CreateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyManagementServer).CreateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyManagement_CreateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyManagementServer).CreateLocation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyManagement_AddUserToCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyManagementServer).AddUserToCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyManagement_AddUserToCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyManagementServer).AddUserToCompany(ctx, req.(*AddUserToCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyManagement_ServiceDesc is the grpc.ServiceDesc for CompanyManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hestia.v1.company.CompanyManagement",
	HandlerType: (*CompanyManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompany",
			Handler:    _CompanyManagement_CreateCompany_Handler,
		},
		{
			MethodName: "GetCompanies",
			Handler:    _CompanyManagement_GetCompanies_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _CompanyManagement_GetCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _CompanyManagement_UpdateCompany_Handler,
		},
		{
			MethodName: "CreateLocation",
			Handler:    _CompanyManagement_CreateLocation_Handler,
		},
		{
			MethodName: "AddUserToCompany",
			Handler:    _CompanyManagement_AddUserToCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company_management.proto",
}
