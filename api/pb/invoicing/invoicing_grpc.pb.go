// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: invoicing.proto

package invoicing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	common "hestia/api/pb/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Invoicing_NewInvoice_FullMethodName  = "/hestia.v1.invoicing.Invoicing/NewInvoice"
	Invoicing_GetInvoices_FullMethodName = "/hestia.v1.invoicing.Invoicing/GetInvoices"
	Invoicing_GetInvoice_FullMethodName  = "/hestia.v1.invoicing.Invoicing/GetInvoice"
)

// InvoicingClient is the client API for Invoicing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoicingClient interface {
	NewInvoice(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetInvoices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListInvoices, error)
	GetInvoice(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Invoice, error)
}

type invoicingClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoicingClient(cc grpc.ClientConnInterface) InvoicingClient {
	return &invoicingClient{cc}
}

func (c *invoicingClient) NewInvoice(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Invoicing_NewInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicingClient) GetInvoices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListInvoices, error) {
	out := new(ListInvoices)
	err := c.cc.Invoke(ctx, Invoicing_GetInvoices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicingClient) GetInvoice(ctx context.Context, in *common.Id, opts ...grpc.CallOption) (*Invoice, error) {
	out := new(Invoice)
	err := c.cc.Invoke(ctx, Invoicing_GetInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoicingServer is the server API for Invoicing service.
// All implementations must embed UnimplementedInvoicingServer
// for forward compatibility
type InvoicingServer interface {
	NewInvoice(context.Context, *Invoice) (*emptypb.Empty, error)
	GetInvoices(context.Context, *emptypb.Empty) (*ListInvoices, error)
	GetInvoice(context.Context, *common.Id) (*Invoice, error)
	mustEmbedUnimplementedInvoicingServer()
}

// UnimplementedInvoicingServer must be embedded to have forward compatible implementations.
type UnimplementedInvoicingServer struct {
}

func (UnimplementedInvoicingServer) NewInvoice(context.Context, *Invoice) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewInvoice not implemented")
}
func (UnimplementedInvoicingServer) GetInvoices(context.Context, *emptypb.Empty) (*ListInvoices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoices not implemented")
}
func (UnimplementedInvoicingServer) GetInvoice(context.Context, *common.Id) (*Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedInvoicingServer) mustEmbedUnimplementedInvoicingServer() {}

// UnsafeInvoicingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoicingServer will
// result in compilation errors.
type UnsafeInvoicingServer interface {
	mustEmbedUnimplementedInvoicingServer()
}

func RegisterInvoicingServer(s grpc.ServiceRegistrar, srv InvoicingServer) {
	s.RegisterService(&Invoicing_ServiceDesc, srv)
}

func _Invoicing_NewInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicingServer).NewInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Invoicing_NewInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicingServer).NewInvoice(ctx, req.(*Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoicing_GetInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicingServer).GetInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Invoicing_GetInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicingServer).GetInvoices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invoicing_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicingServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Invoicing_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicingServer).GetInvoice(ctx, req.(*common.Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Invoicing_ServiceDesc is the grpc.ServiceDesc for Invoicing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Invoicing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hestia.v1.invoicing.Invoicing",
	HandlerType: (*InvoicingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewInvoice",
			Handler:    _Invoicing_NewInvoice_Handler,
		},
		{
			MethodName: "GetInvoices",
			Handler:    _Invoicing_GetInvoices_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _Invoicing_GetInvoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invoicing.proto",
}
