/**
 * @fileoverview gRPC-Web generated client stub for hestia.v1.company
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.0
// source: company_management.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"
import * as company_management_pb from './company_management_pb'; // proto import: "company_management.proto"


export class CompanyManagementClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateCompany = new grpcWeb.MethodDescriptor(
    '/hestia.v1.company.CompanyManagement/CreateCompany',
    grpcWeb.MethodType.UNARY,
    company_management_pb.CreateCompanyRequest,
    company_management_pb.Id,
    (request: company_management_pb.CreateCompanyRequest) => {
      return request.serializeBinary();
    },
    company_management_pb.Id.deserializeBinary
  );

  createCompany(
    request: company_management_pb.CreateCompanyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<company_management_pb.Id>;

  createCompany(
    request: company_management_pb.CreateCompanyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: company_management_pb.Id) => void): grpcWeb.ClientReadableStream<company_management_pb.Id>;

  createCompany(
    request: company_management_pb.CreateCompanyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: company_management_pb.Id) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/hestia.v1.company.CompanyManagement/CreateCompany',
        request,
        metadata || {},
        this.methodDescriptorCreateCompany,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/hestia.v1.company.CompanyManagement/CreateCompany',
    request,
    metadata || {},
    this.methodDescriptorCreateCompany);
  }

  methodDescriptorGetCompanies = new grpcWeb.MethodDescriptor(
    '/hestia.v1.company.CompanyManagement/GetCompanies',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    company_management_pb.ListCompaniesResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    company_management_pb.ListCompaniesResponse.deserializeBinary
  );

  getCompanies(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<company_management_pb.ListCompaniesResponse>;

  getCompanies(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: company_management_pb.ListCompaniesResponse) => void): grpcWeb.ClientReadableStream<company_management_pb.ListCompaniesResponse>;

  getCompanies(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: company_management_pb.ListCompaniesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/hestia.v1.company.CompanyManagement/GetCompanies',
        request,
        metadata || {},
        this.methodDescriptorGetCompanies,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/hestia.v1.company.CompanyManagement/GetCompanies',
    request,
    metadata || {},
    this.methodDescriptorGetCompanies);
  }

  methodDescriptorGetCompany = new grpcWeb.MethodDescriptor(
    '/hestia.v1.company.CompanyManagement/GetCompany',
    grpcWeb.MethodType.UNARY,
    company_management_pb.Id,
    company_management_pb.Company,
    (request: company_management_pb.Id) => {
      return request.serializeBinary();
    },
    company_management_pb.Company.deserializeBinary
  );

  getCompany(
    request: company_management_pb.Id,
    metadata?: grpcWeb.Metadata | null): Promise<company_management_pb.Company>;

  getCompany(
    request: company_management_pb.Id,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: company_management_pb.Company) => void): grpcWeb.ClientReadableStream<company_management_pb.Company>;

  getCompany(
    request: company_management_pb.Id,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: company_management_pb.Company) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/hestia.v1.company.CompanyManagement/GetCompany',
        request,
        metadata || {},
        this.methodDescriptorGetCompany,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/hestia.v1.company.CompanyManagement/GetCompany',
    request,
    metadata || {},
    this.methodDescriptorGetCompany);
  }

  methodDescriptorUpdateCompany = new grpcWeb.MethodDescriptor(
    '/hestia.v1.company.CompanyManagement/UpdateCompany',
    grpcWeb.MethodType.UNARY,
    company_management_pb.UpdateCompanyRequest,
    google_protobuf_empty_pb.Empty,
    (request: company_management_pb.UpdateCompanyRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  updateCompany(
    request: company_management_pb.UpdateCompanyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  updateCompany(
    request: company_management_pb.UpdateCompanyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  updateCompany(
    request: company_management_pb.UpdateCompanyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/hestia.v1.company.CompanyManagement/UpdateCompany',
        request,
        metadata || {},
        this.methodDescriptorUpdateCompany,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/hestia.v1.company.CompanyManagement/UpdateCompany',
    request,
    metadata || {},
    this.methodDescriptorUpdateCompany);
  }

  methodDescriptorCreateLocation = new grpcWeb.MethodDescriptor(
    '/hestia.v1.company.CompanyManagement/CreateLocation',
    grpcWeb.MethodType.UNARY,
    company_management_pb.Location,
    company_management_pb.Id,
    (request: company_management_pb.Location) => {
      return request.serializeBinary();
    },
    company_management_pb.Id.deserializeBinary
  );

  createLocation(
    request: company_management_pb.Location,
    metadata?: grpcWeb.Metadata | null): Promise<company_management_pb.Id>;

  createLocation(
    request: company_management_pb.Location,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: company_management_pb.Id) => void): grpcWeb.ClientReadableStream<company_management_pb.Id>;

  createLocation(
    request: company_management_pb.Location,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: company_management_pb.Id) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/hestia.v1.company.CompanyManagement/CreateLocation',
        request,
        metadata || {},
        this.methodDescriptorCreateLocation,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/hestia.v1.company.CompanyManagement/CreateLocation',
    request,
    metadata || {},
    this.methodDescriptorCreateLocation);
  }

  methodDescriptorAddUserToCompany = new grpcWeb.MethodDescriptor(
    '/hestia.v1.company.CompanyManagement/AddUserToCompany',
    grpcWeb.MethodType.UNARY,
    company_management_pb.AddUserToCompanyRequest,
    google_protobuf_empty_pb.Empty,
    (request: company_management_pb.AddUserToCompanyRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  addUserToCompany(
    request: company_management_pb.AddUserToCompanyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  addUserToCompany(
    request: company_management_pb.AddUserToCompanyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  addUserToCompany(
    request: company_management_pb.AddUserToCompanyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/hestia.v1.company.CompanyManagement/AddUserToCompany',
        request,
        metadata || {},
        this.methodDescriptorAddUserToCompany,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/hestia.v1.company.CompanyManagement/AddUserToCompany',
    request,
    metadata || {},
    this.methodDescriptorAddUserToCompany);
  }

}

